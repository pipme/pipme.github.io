{
  "hash": "a2892a8dc90d9711de34517ef509c963",
  "result": {
    "markdown": "---\ntitle: \"`exp(x)` overflow/underflow in Numpy (float64)\"\ndate: \"2024-09-26\"\ndate-modified: last-modified\ncategories: [Numpy, Python]\nformat:\n  html: default\nexecute: \n  enabled: true\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\n\nnp.seterr(all=\"ignore\")\nprint(\"Numpy float info:\", np.finfo(float))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumpy float info: Machine parameters for float64\n---------------------------------------------------------------\nprecision =  15   resolution = 1.0000000000000001e-15\nmachep =    -52   eps =        2.2204460492503131e-16\nnegep =     -53   epsneg =     1.1102230246251565e-16\nminexp =  -1022   tiny =       2.2250738585072014e-308\nmaxexp =   1024   max =        1.7976931348623157e+308\nnexp =       11   min =        -max\nsmallest_normal = 2.2250738585072014e-308   smallest_subnormal = 4.9406564584124654e-324\n---------------------------------------------------------------\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Binary search\"}\n# Binary search: find the minimal integer x such that np.exp(x) is not zero\ndef find_minimal_exp_x():\n    left = -10000\n    right = 0\n    while right - left > 1:\n        mid = (left + right) // 2\n        if np.exp(mid) == 0:\n            left = mid\n        else:\n            right = mid\n    return right\n\n\nmin_int = find_minimal_exp_x()\n\n\n# Binary search: find the maximal integer x such that np.exp(x) is not infinity\ndef find_maximal_exp_x():\n    left = 0\n    right = 10000\n    while right - left > 1:\n        mid = (left + right) // 2\n        if np.exp(mid) != np.inf:\n            left = mid\n        else:\n            right = mid\n    return right\n\n\nmax_int = find_maximal_exp_x()\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(f\"np.exp({min_int - 1}) = {np.exp(min_int - 1)}\")\nprint(f\"np.exp({min_int}) = {np.exp(min_int)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnp.exp(-746) = 0.0\nnp.exp(-745) = 5e-324\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(f\"np.exp({max_int - 1}) = {np.exp(max_int - 1)}\")\nprint(f\"np.exp({max_int}) = {np.exp(max_int)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnp.exp(709) = 8.218407461554972e+307\nnp.exp(710) = inf\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index-gist_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "541fff3a74c4b83fad20ea1803169abd",
  "result": {
    "markdown": "---\ntitle: \"Start Blogging with Quarto\"\ndate: \"2023-06-10\"\ndate-modified: last-modified\ncategories: [news]\nbibliography: [../all.bib, local.bib]\n# pdf-engine: pdflatex\nformat:\n  html: default\n  ipynb: default\n  revealjs: \n    output-file: document-revealjs.html\n  pdf:\n    cite-method: biblatex\n    biblatexoptions:\n      - \"backend=biber\"\n      - \"sorting=none\"\n      - \"backref=true\"\n      - \"backrefstyle=three\"\n      - \"hyperref=true\"\n    keep-tex: true\n    include-in-header:\n      text: |\n        \\usepackage[ruled,vlined,linesnumbered]{algorithm2e}\n        \\usepackage{tikz}\n        \\usetikzlibrary{shapes, decorations, calc, arrows}\n        \\usetikzlibrary{3d,fit,backgrounds, decorations.text}\n        \\usetikzlibrary{positioning, shapes.symbols}\n        \\usetikzlibrary{decorations.pathreplacing, calligraphy}\n        \\tikzset{>=latex}\n\nformat-links: [pdf, ipynb, revealjs]\n---\n\n\nQuarto seems to be a great choice for posting with executable codes and it's nice that one can generate pdfs, slides etc. from a quasi-markdown file with unified styles (qmd). So I decide to start blogging with Quarto and probably make slides with it in the future as the web-based solution (revealjs) looks elegant and promising in the long run.\n\nBuilding a site with Quarto is relatively easy and interesting. The documentation is very nicely written. You could find some useful tips [here](../2023-06-11-Quarto-tips/index-gist.qmd). See @navarro2022 for more workthrough details.  \n\nBy the way, I fell in love with writing in markdown since the birth of another great tool [Obsidian](https://obsidian.md/) and gradually realize that habitual writing is essential for a researcher, for building one's second brain, undertanding things better and sharing knowledge.\n\nFor Obsidian, I put some useful plugins [here](../2023-06-11-Obsidian-Zotero-tips/), together with Zotero's. Maybe I could write a blog for sharing my workflows in an academic life. I will probably wait until I get more familiar with Quarto and see how they fit with daily needs.\n\nWelcome to my blog ðŸ˜ƒ &#10003; :grinning:!\nHere is some plain text.\n\nNext, let's write some pseudo code.  Note that you don't _have_ to specify a language if using plain backticks.\n\n```\nobject <- [some kind of calculation]\n```\n\nIf you set `eval = FALSE` you can get the highlighted background\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobject <- [some kind of calculation]\nNote that this; is not valid R code\n```\n:::\n\n\nYou may find it interesting that your example works just fine for me.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloop through each species\n    loop through each measurement of the current species\n    ...\netc.\n```\n:::\n\n\n# Algorithm 1\nJust a sample algorithmn\n\\begin{algorithm}[H]\n\\DontPrintSemicolon\n\\SetAlgoLined\n\\KwResult{Write here the result}\n\\SetKwInOut{Input}{Input}\\SetKwInOut{Output}{Output}\n\\Input{Write here the input}\n\\Output{Write here the output}\n\\BlankLine\n\\While{While condition}{\n    instructions\\;\n    \\eIf{condition}{\n        instructions1\\;\n        instructions2\\;\n    }{\n        instructions3\\;\n    }\n}\n\\caption{While loop with If/Else condition}\n\\end{algorithm} \n\n<script>\n    MathJax = {\n        tex: {\n            inlineMath: [['$','$'], ['\\\\(','\\\\)']],\n            displayMath: [['$$','$$'], ['\\\\[','\\\\]']],\n            processEscapes: true,\n            processEnvironments: true,\n        }\n    }\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-chtml.js\"\n        integrity=\"sha256-Cm3tWrvOEzMWWN0jnzQ4Kr0GSSx0txth6MqoES7FX6U=\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\">\n</script>\n\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/pseudocode@latest/build/pseudocode.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/pseudocode@latest/build/pseudocode.min.js\">\n</script>\n\n<pre id=\"quicksort\" class=\"pseudocode\">\n    % This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)\n    \\begin{algorithm}\n    \\caption{Quicksort}\n    \\begin{algorithmic}\n    \\PROCEDURE{Quicksort}{$A, p, r$}\n        \\IF{$p < r$} \n            \\STATE $q = $ \\CALL{Partition}{$A, p, r$}\n            \\STATE \\CALL{Quicksort}{$A, p, q - 1$}\n            \\STATE \\CALL{Quicksort}{$A, q + 1, r$}\n        \\ENDIF\n    \\ENDPROCEDURE\n    \\PROCEDURE{Partition}{$A, p, r$}\n        \\STATE $x = A[r]$\n        \\STATE $i = p - 1$\n        \\FOR{$j = p$ \\TO $r - 1$}\n            \\IF{$A[j] < x$}\n                \\STATE $i = i + 1$\n                \\STATE exchange\n                $A[i]$ with $A[j]$\n            \\ENDIF\n            \\STATE exchange $A[i]$ with $A[r]$\n        \\ENDFOR\n    \\ENDPROCEDURE\n    \\end{algorithmic}\n    \\end{algorithm}\n</pre>\n\n<script>\n    pseudocode.renderElement(document.getElementById(\"quicksort\"));\n</script>\n\n<script>\n    pseudocode.renderClass(\"pseudocode\");\n</script>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}